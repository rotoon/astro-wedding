---
interface BioCardProps {
  name: string
  birthday: string
  description: string
  photo: string
  photoPosition: string
  className: string
  delay: number
}

const bioData: BioCardProps[] = [
  {
    name: 'Nuttapon',
    birthday: 'September 8, 1989',
    description: 'Developer, passionate about travel',
    photo: '/img/groom.webp',
    photoPosition: 'center',
    className: 'groom-card',
    delay: 0,
  },
  {
    name: 'Suchanya',
    birthday: 'September 27, 1990',
    description: 'Food and Beverage, loves photography and coffee',
    photo: '/img/bride.webp',
    photoPosition: 'top',
    className: 'bride-card',
    delay: 150,
  },
]

const ANIMATION_CONFIG = {
  threshold: 0.2,
  rootMargin: '0px 0px -50px 0px',
  baseDelay: 100,
} as const
---

<!-- Couple Bio Section -->
<section class='bio-section'>
  <div class='section-decorative-line'></div>
  <div class='content-wrapper'>
    <div class='bio-heading'>
      <h2 class='section-title reveal-title'>About Us</h2>
      <div class='decorative-flourish'>
        <svg
          viewBox='0 0 100 20'
          preserveAspectRatio='none'
        >
          <path
            d='M0,10 C30,20 70,0 100,10'
            vector-effect='non-scaling-stroke'
          ></path>
        </svg>
      </div>
    </div>
    <div class='bio-content'>
      <div class='bio-cards'>
        {
          bioData.map((bio, index) => (
            <>
              <div
                class={`bio-card ${bio.className} reveal-item`}
                data-delay={bio.delay}
              >
                <div
                  class='bio-photo'
                  style={`
                  background-image: url('${bio.photo}');
                  background-size: cover;
                  background-position: ${bio.photoPosition};
                `}
                />
                <div class='bio-info'>
                  <h3>{bio.name}</h3>
                  <p class='bio-birthday'>{bio.birthday}</p>
                  <p class='bio-detail'>{bio.description}</p>
                </div>
              </div>
              {index === 0 && (
                <div
                  class='bio-separator reveal-item'
                  data-delay={ANIMATION_CONFIG.baseDelay}
                >
                  <div class='bio-heart'>‚ù§</div>
                </div>
              )}
            </>
          ))
        }
      </div>
    </div>
  </div>
  <div class='accent-shape shape-1'></div>
  <div class='accent-shape shape-2'></div>
</section>

<!-- All styles have been moved to global.css -->

<script>
  // Types
  interface AnimationOptions {
    threshold: number
    rootMargin: string
  }

  // Constants
  const ANIMATION_CONFIG = {
    threshold: 0.2,
    rootMargin: '0px 0px -50px 0px',
  } satisfies AnimationOptions

  // Utility functions
  const handleIntersection = (entries: IntersectionObserverEntry[]): void => {
    entries.forEach((entry) => {
      if (!entry.isIntersecting) return

      const element = entry.target as HTMLElement
      const delay = parseInt(element.dataset.delay || '0', 10)

      requestAnimationFrame(() => {
        setTimeout(() => {
          element.classList.add('visible')
        }, delay)
      })

      observer.unobserve(element)
    })
  }

  // Initialize animations
  const observer = new IntersectionObserver(
    handleIntersection,
    ANIMATION_CONFIG
  )

  // Setup on DOM load
  document.addEventListener('DOMContentLoaded', () => {
    const elements = document.querySelectorAll<HTMLElement>(
      '.bio-card, .bio-separator'
    )
    elements.forEach((element) => observer.observe(element))
  })
</script>
