---
// Read images from the img/slide folder
import fs from 'node:fs'
import path from 'node:path'

// Read all image files from the slide folder
const slideDir = path.join(process.cwd(), 'public/img/slide')
const galleryImages = fs
  .readdirSync(slideDir)
  // .filter((file) => file.endsWith('.webp'))
  .sort(() => Math.random() - 0.5) // Random sort instead of alphabetical sort
---

<!-- Photo Gallery -->
<section class='gallery-section'>
  <div class='gallery-title-container'>
    <div class='gallery-ornament left'></div>
    <h2 class='section-title gallery-title reveal-title'>Our Love Story</h2>
    <div class='gallery-ornament right'></div>
  </div>

  <div class='swiper-container'>
    <div class='swiper-wrapper'>
      {
        galleryImages.map((filename) => (
          <div class='swiper-slide'>
            <div
              class='gallery-image'
              style={`background-image: url(/img/slide/${filename})`}
            />
          </div>
        ))
      }
    </div>
    <div class='swiper-pagination'></div>
  </div>
  <div class='gallery-controls'>
    <div class='swiper-button-prev'></div>
    <div class='swiper-button-next'></div>
  </div>
</section>

<style>
  /* Gallery image styling */
  .gallery-image {
    height: 600px;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    border-radius: 8px;
    overflow: hidden;
  }

  .swiper-slide {
    height: auto;
    border-radius: 8px;
    overflow: hidden;
  }

  /* Custom pagination positioning */
  .swiper-pagination {
    position: relative;
    margin-top: 15px;
  }

  .swiper-pagination-bullet {
    width: 10px;
    height: 10px;
    background-color: rgba(0, 0, 0, 0.3);
    opacity: 1;
  }

  .swiper-pagination-bullet-active {
    background-color: var(--accent-color, #ad8e77);
  }

  /* Mobile specific adjustments */
  @media (max-width: 768px) {
    .swiper-pagination {
      bottom: 0;
      margin-top: 20px;
      padding-bottom: 15px;
    }

    .swiper-pagination-bullet {
      width: 12px;
      height: 12px;
      margin: 0 5px;
    }

    .gallery-controls {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      width: 100%;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 10px;
      /* margin-top: 10px; */
      z-index: 10;
      pointer-events: none; /* Allow touches to pass through to the swiper */
    }

    .swiper-button-prev,
    .swiper-button-next {
      position: relative;
      width: 40px;
      height: 40px;
      margin: 0;
      left: auto;
      right: auto;
      top: auto;
      background-color: rgba(255, 255, 255, 0.8);
      border-radius: 50%;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      pointer-events: auto; /* Re-enable touch events on buttons */
    }

    .swiper-button-prev {
      left: -20px;
    }

    .swiper-button-next {
      right: 20px;
    }

    .swiper-button-prev:after,
    .swiper-button-next:after {
      font-size: 18px;
      color: #333;
    }
  }
</style>

<script>
  // Adding TypeScript declarations for Swiper
  declare const Swiper: any

  interface SwiperOptions {
    effect: string
    grabCursor: boolean
    centeredSlides: boolean
    slidesPerView: string | number
    initialSlide: number
    coverflowEffect: {
      rotate: number
      stretch: number
      depth: number
      modifier: number
      slideShadows: boolean
    }
    pagination: {
      el: string
      clickable: boolean
    }
    navigation: {
      nextEl: string
      prevEl: string
    }
    breakpoints: {
      [key: number]: {
        slidesPerView: string | number
        spaceBetween: number
      }
    }
    preloadImages: boolean
    lazy:
      | boolean
      | {
          loadPrevNext: boolean
          loadPrevNextAmount: number
          loadOnTransitionStart: boolean
          elementClass: string
          loadingClass: string
          loadedClass: string
          preloaderClass: string
        }
    watchSlidesProgress: boolean
    autoplay: {
      delay: number
      disableOnInteraction: boolean
      pauseOnMouseEnter: boolean
    }
  }

  const swiperOptions: SwiperOptions = {
    effect: 'slide',
    grabCursor: true,
    centeredSlides: false,
    slidesPerView: 'auto',
    initialSlide: 0,
    coverflowEffect: {
      rotate: 5,
      stretch: 0,
      depth: 100,
      modifier: 1,
      slideShadows: false,
    },
    pagination: {
      el: '.swiper-pagination',
      clickable: true,
    },
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
    breakpoints: {
      320: {
        slidesPerView: 1,
        spaceBetween: 20,
      },
      768: {
        slidesPerView: 2,
        spaceBetween: 20,
      },
      992: {
        slidesPerView: 3,
        spaceBetween: 30,
      },
      1440: {
        slidesPerView: 4,
        spaceBetween: 30,
      },
      1600: {
        slidesPerView: 5,
        spaceBetween: 30,
      },
      // 1920: {
      //   slidesPerView: 6,
      //   spaceBetween: 30,
      // },
    },
    preloadImages: true,
    lazy: false,
    watchSlidesProgress: true,
    autoplay: {
      delay: 3000,
      disableOnInteraction: false,
      pauseOnMouseEnter: true,
    },
  }

  // Initialize swiper with performance optimizations
  const initializeSwiper = () => {
    try {
      if (typeof Swiper === 'undefined') {
        setTimeout(initializeSwiper, 500)
        return
      }

      // Initialize Swiper
      const swiper = new Swiper('.swiper-container', swiperOptions)

      // Optimize navigation interactions
      const next = document.querySelector('.swiper-button-next')
      const prev = document.querySelector('.swiper-button-prev')

      if (next) {
        next.addEventListener('click', () => {
          // Navigation functionality
        })
      }

      if (prev) {
        prev.addEventListener('click', () => {
          // Navigation functionality
        })
      }
    } catch (error) {
      console.error('Error initializing Swiper:', error)
    }
  }

  // Use requestIdleCallback or setTimeout for better performance
  const initWhenIdle = () => {
    if ('requestIdleCallback' in window) {
      requestIdleCallback(() => initializeSwiper(), { timeout: 2000 })
    } else {
      setTimeout(initializeSwiper, 1000)
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initWhenIdle)
  } else {
    initWhenIdle()
  }
</script>
