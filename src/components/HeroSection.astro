<div class='parallax-hero'>
  <div
    class='parallax-layer hero-bg'
    data-speed='0.2'
  >
  </div>
  <div
    class='parallax-layer hero-overlay'
    data-speed='0.1'
  >
  </div>
  <div class='parallax-content'>
    <div class='hero-date'>
      <div class='date-line'><span>25</span></div>
      <div class='date-line'><span>05</span></div>
      <div class='date-line'><span>2025</span></div>
    </div>
    <div class='hero-title'>
      <div class='heading-decorative'>It's happening!</div>
      <h1 class='main-title'>
        <span class='name-line-1'>Suchanya</span>
        <span class='name-separator'>&</span>
        <span class='name-line-2'>Nuttapon</span>
      </h1>
    </div>
    <div class='scroll-indicator'>
      <span>Explore More</span>
      <div class='scroll-arrow'>
        <svg
          viewBox='0 0 24 24'
          width='24'
          height='24'
          stroke='currentColor'
          stroke-width='1'
          fill='none'
          stroke-linecap='round'
          stroke-linejoin='round'
        >
          <path d='M12 5v14M5 12l7 7 7-7'></path>
        </svg>
      </div>
    </div>
  </div>
  <div class='hero-ornamental-border'></div>
</div>

<script>
  import { throttle } from '../utils/throttle'

  const parallaxElements =
    document.querySelectorAll<HTMLElement>('.parallax-layer')
  const viewportHeight = window.innerHeight

  // Use RAF-based throttling for smoother animations
  const updateParallax = () => {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop

    if (scrollTop <= viewportHeight) {
      parallaxElements.forEach((element) => {
        const speed = parseFloat(element.getAttribute('data-speed') || '0')
        const yPos = -(scrollTop * speed)

        if (element.classList.contains('hero-bg')) {
          const scale = 1.1 - scrollTop * 0.0002
          element.style.transform = `scale(${scale}) translateY(${yPos}px)`
        } else {
          element.style.transform = `translateY(${yPos}px)`
        }
        if (element.classList.contains('hero-title')) {
          element.classList.add('visible')
        }
      })
    }
  }

  // Add event listener with passive option for better performance
  window.addEventListener('scroll', updateParallax, { passive: true })

  // Initial update
  updateParallax()

  // Clean up on page unload
  document.addEventListener('astro:before-swap', () => {
    window.removeEventListener('scroll', updateParallax)
    ;(updateParallax as any).cancel?.()
  })
</script>
